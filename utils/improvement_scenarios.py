# utils/improvement_scenarios.py

# üìå Mapping nh√£n KMeans th√†nh m√¥ t·∫£ d·ªÖ hi·ªÉu
cluster_labels = {
    0: "‚úÖ R·∫•t t·ªët",
    1: "‚ö†Ô∏è Trung b√¨nh",
    2: "‚úÖ T·ªët",
    3: "‚ùå R·∫•t x·∫•u"
}

# üìå ƒê√°nh gi√° xung ƒë·ªôt gi·ªØa TSI v√† Cluster
def evaluate_tsi_vs_cluster(tsi, cluster_id):
    """
    ƒê√°nh gi√° m·ªëi quan h·ªá gi·ªØa TSI v√† ph√¢n c·ª•m KMeans ƒë·ªÉ ph√°t hi·ªán xung ƒë·ªôt.
    """
    if cluster_id == 0 and tsi >= 900:
        return "‚úÖ R·∫•t t·ªët ‚Äì Tokenomics ·ªïn ƒë·ªãnh v√† b·ªÅn v·ªØng."
    elif cluster_id == 1 and tsi >= 850:
        return "‚ö†Ô∏è TSI cao nh∆∞ng ph√¢n c·ª•m Trung b√¨nh ‚Äì C√≥ th·ªÉ m·∫•t c√¢n ƒë·ªëi v·ªÅ ph√¢n b·ªï."
    elif cluster_id == 2 and tsi >= 800:
        return "‚úÖ T·ªët ‚Äì Tokenomics h·ª£p l√Ω nh∆∞ng c√≥ th·ªÉ t·ªëi ∆∞u th√™m."
    elif cluster_id == 3 and tsi >= 750:
        return "‚ö†Ô∏è TSI kh√° nh∆∞ng ph√¢n c·ª•m x·∫•u ‚Äì C·∫ßn c·∫£i thi·ªán ph√¢n b·ªï vesting."
    elif cluster_id == 3 and tsi < 750:
        return "‚ùå R·∫•t r·ªßi ro ‚Äì Tokenomics m·∫•t c√¢n b·∫±ng, c·∫ßn c·∫£i thi·ªán ƒë√°ng k·ªÉ."
    else:
        return "üìå Xem x√©t th√™m ƒë·ªÉ ƒë∆∞a ra k·∫øt lu·∫≠n ch√≠nh x√°c."

# üìå Rule-based ƒë·ªÅ xu·∫•t c·∫£i thi·ªán theo t·ª´ng ƒë·∫∑c tr∆∞ng tokenomics
feature_improvement_rules = {
    "SPI": {
        "threshold": 0.3,
        "comparison": "<",
        "advice": "‚ö†Ô∏è SPI th·∫•p ‚Üí D·ª± √°n unlock qu√° √≠t trong 12 th√°ng ƒë·∫ßu. C√¢n nh·∫Øc gi·∫£m Initial Unlock ho·∫∑c tƒÉng s·ªë th√°ng Vesting."
    },
    "ACI": {
        "threshold": 0.7,
        "comparison": ">",
        "advice": "‚ö†Ô∏è ACI cao ‚Üí Token b·ªã ph√¢n b·ªï qu√° t·∫≠p trung. N√™n ph√¢n b·ªï ƒë·ªÅu h∆°n gi·ªØa c√°c nh√≥m."
    },
    "VLS": {
        "threshold": 0.3,
        "comparison": "<",
        "advice": "‚ö†Ô∏è VLS th·∫•p ‚Üí Vesting period qu√° ng·∫Øn. K√©o d√†i th·ªùi gian vesting ƒë·ªÉ ƒë·∫£m b·∫£o cam k·∫øt l√¢u d√†i."
    },
    "CSP_TGE": {
        "threshold": 0.2,
        "comparison": ">",
        "advice": "‚ö†Ô∏è CSP_TGE cao ‚Üí Qu√° nhi·ªÅu token unlock t·∫°i TGE. Gi·∫£m Initial Unlock ƒë·ªÉ tr√°nh √°p l·ª±c b√°n."
    },
    "UVS": {
        "threshold": 50,
        "comparison": ">",
        "advice": "‚ö†Ô∏è UVS cao ‚Üí Unlock h√†ng th√°ng bi·∫øn ƒë·ªông l·ªõn. ƒêi·ªÅu ch·ªânh l·∫°i l·ªãch unlock ƒë·ªÉ ƒë·ªÅu h∆°n."
    },
    "LUE": {
        "threshold": 2,
        "comparison": ">",
        "advice": "‚ö†Ô∏è LUE cao ‚Üí Qu√° nhi·ªÅu ƒë·ª£t unlock l·ªõn. C√¢n nh·∫Øc chia nh·ªè c√°c ƒë·ª£t l·ªõn th√†nh c√°c vesting nh·ªè h∆°n."
    },
    "VCI": {
        "threshold": 0.5,
        "comparison": ">",
        "advice": "‚ö†Ô∏è VCI cao ‚Üí ƒê·ªô ·ªïn ƒë·ªãnh th·∫•p. ƒêi·ªÅu ph·ªëi l·∫°i vesting ƒë·ªÉ ƒë·ªÅu h∆°n gi·ªØa c√°c th√°ng."
    },
    "Team_Investor_Percentage": {
        "threshold": 40,
        "comparison": ">",
        "advice": "‚ö†Ô∏è Ph√¢n b·ªï Team & Investors qu√° cao. C√¢n nh·∫Øc gi·∫£m % allocation ƒë·ªÉ tƒÉng t√≠nh c√¥ng b·∫±ng."
    }
}

def check_feature_issue(feature_name, value):
    rule = feature_improvement_rules.get(feature_name)
    if not rule:
        return None
    if rule["comparison"] == "<" and value < rule["threshold"]:
        return rule["advice"]
    if rule["comparison"] == ">" and value > rule["threshold"]:
        return rule["advice"]
    return None
